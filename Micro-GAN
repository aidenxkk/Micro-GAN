import numpy as np
import math
class Value:
    """ stores a single scalar value and its gradient """

    def __init__(self, data, _children=(), _op=''):
        self.data = data
        self.grad = 0
        # internal variables used for autograd graph construction
        self._backward = lambda: None
        self._prev = set(_children)
        self._op = _op # the op that produced this node, for graphviz / debugging / etc

    def __add__(self, other):
        other = other if isinstance(other, Value) else Value(other)
        out = Value(self.data + other.data, (self, other), '+')

        def _backward():
            self.grad += out.grad
            other.grad += out.grad
        out._backward = _backward

        return out

    def __mul__(self, other):
        other = other if isinstance(other, Value) else Value(other)
        out = Value(self.data * other.data, (self, other), '*')

        def _backward():
            self.grad += other.data * out.grad
            other.grad += self.data * out.grad
        out._backward = _backward

        return out

    def __pow__(self, other):
        assert isinstance(other, (int, float)), "only supporting int/float powers for now"
        out = Value(self.data**other, (self,), f'**{other}')

        def _backward():
            self.grad += (other * self.data**(other-1)) * out.grad
        out._backward = _backward

        return out

    def relu(self):
        out = Value(0 if self.data < 0 else self.data, (self,), 'ReLU')

        def _backward():
            self.grad += (out.data > 0) * out.grad
        out._backward = _backward

        return out

    def log(self):
        assert self.data > 0, "log(x) x must > 0"
        out = Value(np.log(self.data), (self,), 'log')
        
        def _backward(): 
            self.grad += (1 / self.data) * out.grad
        out._backward = _backward
        
        return out
    
    def tanh(self):
        x = self.data
        t = (math.exp(2*x) - 1) / (math.exp(2*x) + 1) 
        out = Value(t, (self,), 'tanh')
        
        def _backward():
            self.grad += (1 - t**2) * out.grad    
        out._backward = _backward

        return out
    
    def sigmoid(self):
        out = Value((1 / (1 + np.exp(-self.data))), (self,), 'sigmoid')
        
        def _backward():
            self.grad += (out.data * (1 - out.data)) * out.grad
        out._backward = _backward
        
        return out
    
    def leaky_relu(self,alpha=0.01):
        
        out = Value(self.data if self.data > 0 else alpha * self.data, (self,), 'LeakyReLU')
        
        def _backward():
            self.grad += (1 if self.data > 0 else alpha) * out.grad
        out._backward = _backward
        
        return out
    
    def backward(self):

        # topological order all of the children in the graph
        topo = []
        visited = set()
        def build_topo(v):
            if v not in visited:
                visited.add(v)
                for child in v._prev:
                    build_topo(child)
                topo.append(v)
        build_topo(self)

        # go one variable at a time and apply the chain rule to get its gradient
        self.grad = 1
        for v in reversed(topo):
            v._backward()

    def __neg__(self): # -self
        return self * -1

    def __radd__(self, other): # other + self
        return self + other

    def __sub__(self, other): # self - other
        return self + (-other)

    def __rsub__(self, other): # other - self
        return other + (-self)

    def __rmul__(self, other): # other * self
        return self * other

    def __truediv__(self, other): # self / other
        return self * other**-1

    def __rtruediv__(self, other): # other / self
        return other * self**-1

    def __repr__(self):
        return f"Value(data={self.data}, grad={self.grad})"
def test_sanity_check():

    x = Value(-4.0)
    z = 2 * x + 2 + x
    q = z.relu() + z * x
    h = (z * z).relu()
    y = h + q + q * x
    y.backward()
    xmg, ymg = x, y

    x = torch.Tensor([-4.0]).double()
    x.requires_grad = True
    z = 2 * x + 2 + x
    q = z.relu() + z * x
    h = (z * z).relu()
    y = h + q + q * x
    y.backward()
    xpt, ypt = x, y

    # forward pass went well
    assert ymg.data == ypt.data.item()
    # backward pass went well
    assert xmg.grad == xpt.grad.item()

def test_more_ops():

    a = Value(-4.0)
    b = Value(2.0)
    c = a + b
    d = a * b + b**3
    c += c + 1
    c += 1 + c + (-a)
    d += d * 2 + (b + a).relu()
    d += 3 * d + (b - a).relu()
    e = c - d
    f = e**2
    g = f / 2.0
    g += 10.0 / f
    g.backward()
    amg, bmg, gmg = a, b, g

    a = torch.Tensor([-4.0]).double()
    b = torch.Tensor([2.0]).double()
    a.requires_grad = True
    b.requires_grad = True
    c = a + b
    d = a * b + b**3
    c = c + c + 1
    c = c + 1 + c + (-a)
    d = d + d * 2 + (b + a).relu()
    d = d + 3 * d + (b - a).relu()
    e = c - d
    f = e**2
    g = f / 2.0
    g = g + 10.0 / f
    g.backward()
    apt, bpt, gpt = a, b, g

    tol = 1e-6
    # forward pass went well
    assert abs(gmg.data - gpt.data.item()) < tol
    # backward pass went well
    assert abs(amg.grad - apt.grad.item()) < tol
    assert abs(bmg.grad - bpt.grad.item()) < tol

test_sanity_check()
test_more_ops()
### a small test ###
G = MLP(4, [4,4])
D = MLP(4, [4,1])
noise = [Value(np.random.normal(-1,1)) for _ in range(4)] 
fake_image = G(noise)
ypred_fake = D(fake_image)

ypred.backward()
ypred
def discriminator_loss(real_p, fake_p):
    return -real_p.log() - (1 - fake_p).log()

ypred_real = D([1,0,0,1])

d_total_loss = discriminator_loss(ypred_real,ypred_fake)

draw_dot(ypred)
# Imports

import numpy as np
from numpy import random
from matplotlib import pyplot as plt
%matplotlib inline

# Drawing function

def view_samples(samples, m, n):
    fig, axes = plt.subplots(figsize=(10, 10), nrows=m, ncols=n, sharey=True, sharex=True)
    for ax, img in zip(axes.flatten(), samples):
        ax.xaxis.set_visible(False)
        ax.yaxis.set_visible(False)
        im = ax.imshow(1-img.reshape((2,2)), cmap='Greys_r')  
    return fig, axes
# Examples of faces
faces = [np.array([1,0,0,1]),
         np.array([0.9,0.1,0.2,0.8]),
         np.array([0.9,0.2,0.1,0.8]),
         np.array([0.8,0.1,0.2,0.9]),
         np.array([0.8,0.2,0.1,0.9])]
    
_ = view_samples(faces, 1, 5)
# Examples of noisy images
noise = [np.random.randn(2,2) for i in range(2)]
def generate_random_image():
    return [np.random.random(), np.random.random(), np.random.random(), np.random.random()]
_ = view_samples(noise, 1,2)
### GAN training without batching ####
import numpy as np

np.random.seed(42)
random.seed(42)

number_of_real_faces = 1000
def generate_real_face():
    # Generate the first value in the range [0.75, 1]
    first_value = np.random.uniform(0.75, 1)
    
    # Generate the second and third values in the range [0, 0.3]
    middle_values = np.random.uniform(0, 0.3, 2)
    
    # Generate the last value in the range [0.75, 1]
    last_value = np.random.uniform(0.75, 1)
    
    # Combine all values into a single array
    return np.array([first_value, *middle_values, last_value])

# Generate real faces
faces = [generate_real_face() for _ in range(number_of_real_faces)]  


lr = 0.01
epochs = 5000

D = MLP(4,[4,1])
G = MLP(4,[4,4])

d_errors = []
g_errors = []

def optimize_zero_grad(nn,learning_rate):
    for p in nn.parameters():
        p.data -= learning_rate * p.grad
        p.grad = 0
        
for epoch in range(epochs):

    real_p = D(faces[random.randint(0, number_of_real_faces - 1)])

    noise = [Value(np.random.normal(0, 1)) for _ in range(4)]

    fake_face = G(noise)
    
    fake_p = D(fake_face)

    d_loss = ( - real_p.log() - (1 - fake_p).log()) 
   

    d_errors.append(d_loss)
    
    d_loss.backward()

    optimize_zero_grad(D,lr)

    noise = [Value(np.random.normal(0, 1)) for _ in range(4)] 

    fake_face = G(noise)
    
    fake_p = D(fake_face)

    g_loss = -fake_p.log()
    
    g_errors.append(g_loss)

    g_loss.backward()

    optimize_zero_grad(G,lr)
    
    # Adjust learning rate (simple linear decay)
    lr = lr * (1 - epoch / epochs)

    if epoch % 100 == 0:
        print(f"Epoch {epoch}: D Loss: {d_loss.data}, G Loss: {g_loss.data}")
##### batch processing based on above. ###############

import numpy as np

np.random.seed(42)
random.seed(42)

number_of_real_faces = 1000

def generate_real_face():
    # Generate the first and last value in the range [0.75, 1]
    first_value = np.random.uniform(0.75, 1)
    last_value = np.random.uniform(0.75, 1)

    # Generate the second and third values in the range [0, 0.3]
    middle_values = np.random.uniform(0, 0.3, 2)
        
    # Combine all values into a single array
    return np.array([first_value, *middle_values, last_value])

# Generate real faces
faces = [generate_real_face() for _ in range(number_of_real_faces)]  

lr = 0.01
epochs = 500
batch_size = 32

D = MLP(4,[4,1])
G = MLP(4,[4,4])

d_errors = []
g_errors = []

def optimize_zero_grad(nn,learning_rate):
    for p in nn.parameters():
        p.data -= learning_rate * p.grad
        p.grad = 0

# GAN training
        
for epoch in range(epochs):
    
    # Train Discriminator
    # Fetch a batch of images of "real faces"
    batch_of_faces = [faces[random.randint(0, number_of_real_faces - 1)] for _ in range(batch_size)]
                      
    real_pedictions = [D(x) for x in batch_of_faces]
                      
    noises = [[Value(np.random.normal(0, 1)) for _ in range(4)] for _ in range(batch_size)]

    fake_faces = [G(z) for z in noises]
    
    fake_predictions = [ D(face) for face in fake_faces]

    # Discriminator loss function 
    d_loss = sum (
        - real_p.log() - (1 - fake_p).log() 
        for real_p, fake_p in zip(real_predictions, fake_predictions)
    )/len(real_predictions)
   
    d_errors.append(d_loss)
    
    d_loss.backward()

    optimize_zero_grad(D,lr)
    
    # Train Generator 

    noises = [[Value(np.random.normal(0, 1)) for _ in range(4)] for _ in range(batch_size)]

    fake_face = [G(z) for z in noises]
    
    fake_predictions = [D(face) for face in fake_faces]

    # Generator loss function
    g_loss = sum(- fake_p.log() for fake_p in fake_predictions) / len(fake_predictions)
    
    g_errors.append(g_loss)

    g_loss.backward()

    optimize_zero_grad(G,lr)
    
    # Adjust learning rate (simple linear decay)
    lr = lr * (1 - epoch / epochs)

    if epoch % 100 == 0:
        print(f"Epoch {epoch}: D Loss: {d_loss.data}, G Loss: {g_loss.data}")
draw_dot(d_loss)
draw_dot(g_loss)
import matplotlib.pyplot as plt
import numpy as np


def dot_plot(x,y) : 
    # Create a new figure
    fig, ax = plt.subplots()

    # Plot the data as a scatter plot
    ax.scatter(x, y)

    # Set labels and title
    ax.set_xlabel('X axis')
    ax.set_ylabel('Y axis')
    ax.set_title('Dot Plot of Array x')

    # Show the grid
    ax.grid(True)

    # Display the plot
    plt.show()

import matplotlib.pyplot as plt
plt.plot([x.data for x in g_errors ] )
plt.title("Generator error function")
plt.legend("gen")
plt.show()
plt.plot([x.data for x in d_errors ] )
plt.legend('disc')
generated_images = []
for i in range(20):
    z = [np.random.normal(-1, 1) for _ in range(4)]
    generated_image = G(z)
    generated_images.append(generated_image)
images_render = [] 

for i in generated_images:
    images_render.append(np.array([x.data for x in i]))
        
_ = view_samples(images_render, 4, 5)
generated_image
plt.title("Discriminator error function")
